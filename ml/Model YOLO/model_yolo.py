# -*- coding: utf-8 -*-
"""Another copy of Model YOLO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1msrceq3x86umwxURXS_FaynlY75wzeTJ
"""

!pip install tensorflow

!pip install ultralytics

from ultralytics import YOLO

# Cek versi
import ultralytics
ultralytics.checks()

from google.colab import files
files.upload()  # upload kaggle.json

# Buat folder dan copy token
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# Unduh dataset
!kaggle datasets download -d mochyusufhaidar/dataset-sampah

# Ekstrak
!unzip -q dataset-sampah.zip -d dataset

dataset_path = "/content/dataset/balanced_dataset"

import os
print(os.listdir(dataset_path))

"""# Modelling"""

model = YOLO('yolov8n-cls.pt')
model.train(
    data='/content/dataset/balanced_dataset',
    epochs=20,
    imgsz=224,
    name='train_balanced'
)

# Muat model hasil training
model = YOLO('/content/runs/classify/train_balanced/weights/best.pt')

# Evaluasi model pada dataset validasi
metrics = model.val(data='/content/dataset/balanced_dataset_split', imgsz=224)

# Cetak metrik yang valid untuk klasifikasi
print("Top-1 Accuracy:", metrics.top1)
print("Top-5 Accuracy:", metrics.top5)
print("Kecepatan (ms per image):", metrics.speed)

"""#Menghitung Score"""

from ultralytics import YOLO
from pathlib import Path
from PIL import Image
import numpy as np
from sklearn.metrics import classification_report, confusion_matrix

# Muat model
model = YOLO('/content/runs/classify/train_balanced/weights/best.pt')

# Path ke folder validasi
val_dir = Path('/content/dataset/balanced_dataset_split/val')

# Ambil nama kelas berdasarkan folder
class_names = sorted([d.name for d in val_dir.iterdir() if d.is_dir()])

# Simpan label asli dan prediksi
y_true, y_pred = [], []

for label_idx, class_name in enumerate(class_names):
    img_paths = list((val_dir / class_name).glob('*'))
    for img_path in img_paths:
        img = Image.open(img_path).convert('RGB')
        results = model.predict(img, imgsz=224, verbose=False)
        pred_idx = int(np.argmax(results[0].probs.data.cpu().numpy()))

        y_true.append(label_idx)
        y_pred.append(pred_idx)

# Hitung metrik klasifikasi
print("\n=== Classification Report ===")
print(classification_report(y_true, y_pred, target_names=class_names))

# Matriks kebingungan
print("=== Confusion Matrix ===")
print(confusion_matrix(y_true, y_pred))

import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix

# Hitung confusion matrix
cm = confusion_matrix(y_true, y_pred)

# Plot
plt.figure(figsize=(10, 8))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=class_names, yticklabels=class_names)
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix')
plt.xticks(rotation=45)
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()

from google.colab import files
from ultralytics import YOLO

# Upload gambar
uploaded = files.upload()

# Ambil path gambar
for filename in uploaded.keys():
    image_path = filename

# Load model
model = YOLO('runs/classify/train_balanced/weights/best.pt')

# Prediksi gambar
results = model(image_path)

# Tampilkan hasil prediksi
results[0].show()  # akses elemen pertama dari list dan tampilkan hasil prediksi

# Tampilkan kelas prediksi teratas
top_idx = results[0].probs.top1
top_name = results[0].names[top_idx]
print(f"\nPrediksi utama: {top_name}")

model = YOLO('runs/classify/train_balanced/weights/best.pt')  # load model terbaik
model.save('my_final_model.pt')  # simpan ulang dengan nama yang kamu inginkan

model.export(format='tflite')   # untuk TensorFlow Lite (.tflite)
model.export(format='tfjs')     # untuk TensorFlow.js (.json + bin files)
model.export(format='saved_model')  # menyimpan dalam format TensorFlow SavedModel